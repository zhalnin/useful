/**
 * Created by JetBrains PhpStorm.
 * User: zhalnin
 * Date: 09.05.12
 * Time: 1:02
 * To change this template use File | Settings | File Templates.
 */


///////////////////////////////////////////////////////////////////////
//  Привязка поиска автозаполнения к полю ввода текста               //
///////////////////////////////////////////////////////////////////////
function delayedInput( opt ){
    // Количество времени ожидания до отслеживания нового пользовательского
    // ввода
    opt.time = opt.time || 400;

    // Минимальное количество символов, ожидаемых до запуска запроса
    opt.chars = opt.chars != null ? opt.chars : 3;

    // Обратный вызов, запускаемый, когда должны быть показаны
    // всплываеющие результаты, и, возможно, когда должен быть сделан
    // новый запрос
    opt.open = opt.open || function(){};

    // Обратный вызов, выполняемый, когда всплывающие результаты должны
    // быть закрыты
    opt.close = opt.close || function(){};

    // Фокус поля должен  быть принят во внимание для открытия
    // (закрытия) всплывающих результатов
    opt.focus = opt.focus !== null ? opt.focus : false;

    // Запоминание исходного значения, с которым мы начинаем
    // работать
    var old = opt.elem.value;

    // и текущего состояния открыто-закрыто всплывающего результата
    var state = false;
    // Проверка изменений ввода в заданный интервал времени
    setInterval(function(){
        // Новое вводимое значение
        var newValue = opt.elem.value;

        // Количество введенных символов
//        var len = s.length;
        var v = newValue.length;

        // Быстрая проверка на изменения значения со времени последней
        // проверки ввода
        if( old != newValue){
            // Если введено недостаточно символов, и всплывающие результаты
            // в данный момент открыты
            if( v < opt.chars && state ){
                // Закрыть отображение
                opt.close();
                // И запомнить, что оно закрыто
                state = false;
            // В противном случае, если было введено минимальное
            // количество символов пока оно больше одного символа
            }
            else if( v >= opt.chars && v > 0 ){
                // Открыть выплывающие результаты с текущим значением
                opt.open( newValue, state );
                // Запомнить, что всплывающие результаты на данный
                // момент открыты
                state = true;
            }
            // Сохраниение на будущее текущего значения
            old = newValue;
        }
    }, opt.time);

    // Отследживание нажатия клавиши
    opt.elem.onkeyup = function(){
        // Если в результате нажатия клавиши символов больше не осталось,
        // закрыть всплывающие результаты
        if( this.value.length == 0 ){
            // Закрыть результаты
            state = false;
        }
    };

    // Если мы также проверяем пользовательский фокус (для управления
    // открытием-закрытием всплывающих результатов)
    if(opt.focus){
        // Отслеживание перемещения пользователя за пределы элемента ввода
        opt.elem.onblur = function(){
            // Если результаты открыты
            if(state)
            {
                // закрыть их
                opt.close();
                // и запомнить, что они закрыты
                state = false;
            }
        }

        // Отслеживание, когда пользовательский фокус вернется на элемент
        // ввода
        opt.elem.focus = function(){
            // если во всплывающих результатах есть какое-нибудь значение,
            // и они в данный момент закрыты
            if(this.value.length != 0 && !state){
                // повторное открытие всплывающих результатов, но с пустым
                // значением
                // (это позволит 'открывающей' функции узнать, что
                // перезапрашивать новые результаты с сервера не нужно,
                // нужно их просто заново открыть)
                opt.open('', state);
                // И запомнить, что они открыты
                state = true;
            }
        };
    }
}
///////////////////////////////////////////////////////////////////////
//                                                                   //
///////////////////////////////////////////////////////////////////////
