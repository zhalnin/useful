// Функция для динамической подгрузки страницы при ее прокрутке до определенной длины

// Отслеживание на какой странице содержимого мы находимся в данный момент
var curPage = 1;

// Предотвращение двойной загрузки страницы за одни сеанс работы
var loading = false;

// Отслеживание необходимости загрузки дополнительного содержимого в
// зависимости от того места страницы, которое просматривается
// пользователем
// Определение положения пользовательской области просмотра
window.onscroll = function()
{
    // Перед загрузкой дополнительного содержимого нужно проверить
    // 1) Что мы не на последней странице содержимого
    // 2) Что мы только что уже не загружали каких-нибудь новых публикаций
    // 3) Что мы собираемся загружать только новые для нас публикации,
    //      прокрутка достигла нижней части страницы
    // Проверка положения области просмотра на странице
    if( curPage >= 1 && !loading
        && pageHeight() - scrollY() - windowHeight() < windowHeight() )
    {
        // Запрос RSS XML-потока с использованием AJAX
        // Запоминание того, что мы приступили к загрузке новых публикаций
        loading = true;

        // Загрузка публикаций с использованием доступной нам функции ajax()
        ajax({
            // Запрашиваем простую веб-страницу, поэтому используем GET
            type: "GET",
            // Ожидается RSS-поток, представленный XML-файлом
            data: "xml",
            // Получаем RSS-поток N-ной страницы. При первоначальной загрузке
            // нашей страницы мы находимся на странице '1', поэтому при переходе
            // к предыдущему периоду времени мы начинаем со страницы 2
//        url: "./?feed=rss&paged=1",
            url: "./rss.xml?feed=rss&paged="+(++curPage),
            // Отслеживание успешного завершения извлечения RSS-потока
            onSuccess: function(rss){
                // Проход по RSS XML-документу, используя его DOM
                // Загрузка новых публикаций в <div>,
                // у которого ID имеет значение "content"
                var content = document.getElementById("content");
                // Мы собираемся осуществить последовательный перебор
                // всех публикаций, имеющихся в RSS-потоке
                var items = rss.getElementsByTagName("item");
                for(var i = 0; i < items.length; i++)
                {
                    // Помещение новой публикации в документ
                    content.appendChild(makePost(items[i]));
                }
                // Если из XML-документа уже больше нечего извлекать,
                // мы должны вернуться назад, насколько это возможно
                if(items.length == 0)
                {
                    curPage = 0;
                }
            },
            // Как только запрос будет завершен, можно будет
            // снова осуществить попытку загрузки новых публикаций
            onComplete: function()
            {
                loading = false;
            }
        });
    }
};

// Функция, предназначенная для создания полной DOM-структуры отдельной
// публикации
function makePost( elem )
{
// Извлечение ссылки, заголовка и описательных данных из каждого
    // элемента потока, относящегося к публикации
    var data = getData(elem);

    // Создание нового <div>-контейнера для хранения публикации
    var div = document.createElement("div");
    div.className = "post";

    // Создание заголовка публикации
    var h2 = document.createElement("h2");

    // Здесь содержится заголовок элемента потока и имеется ссылка,
    // указывающая на публикацию
    h2.innerHTML = "<a href='" + data.link + "'>" + data.title + "</a>";

    // Добавление этого содержимого элемента потока и имеется ссылка,
    // указывающая на публикацию
    div.appendChild(h2);

    // Теперь создадим <div>, в котором будет содержаться публикация
    var entry = document.createElement("div");
    entry.className = "entry";

    // Добавим в <div> содержимое публикации
    entry.innerHTML = data.desc;
    div.appendChild(entry);

    // В завершение добавим нижнюю часть, содержащую ссылку возврата
    var meta = document.createElement("p");
    meta.className = "postmetadata";

    var a = document.createElement("a");
    a.href = data.link + "#comments";
    a.innerHTML = "Комментарий";
    meta.appendChild(a);

    div.appendChild(meta);

    return div;
}

// Функция для извлечения данных из DOM-элемента
function getData( elem )
{
    // Мы собираемся вернуть данные в виде четко отформатированного объекта
    return {
        // Извлечение из элемента <items> RSS-потока заголовка, описания и
        // ссылки
        title: elem.getElementsByTagName("title")[0].firstChild.nodeValue,
        desc: elem.getElementsByTagName("description")[0].firstChild.nodeValue,
        link: elem.getElementsByTagName("link")[0].firstChild.nodeValue
    };
}